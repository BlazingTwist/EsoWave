export ::fluid_logic

class fluid_logic

	.{==========================
		static utility methods
	============================.}
	
	.# a boundary_func for fluid_logic::diffuse that duplicates the edge values outwards
	def fluid_logic::boundary_duplicate {scalar_mat fluid_logic,
		scalar_mat :&0I \ :&:&E1-I \ .B.V
					 .T :&0I \ :&:&E1-I \ .B.V .T
	}
	
	.# a boundary_func for fluid_logic::diffuse
	.#   it duplicates the left/right edge values
	.#   and mirrors the top/bottom edge values
	def fluid_logic::boundary_mirror_y {scalar_mat fluid_logic,
		scalar_mat :&0I:1* \ :&:&E1-I:1* \ .B.V
					 .T :&0I    \ :&:&E1-I    \ .B.V .T
	}
	
	.# a boundary_func for fluid_logic::diffuse
	.#   it mirrors the left/right edge values
	.#   and duplicates the top/bottom edge values
	def fluid_logic::boundary_mirror_x {scalar_mat fluid_logic,
		scalar_mat :&0I    \ :&:&E1-I    \ .B.V
					 .T :&0I:1* \ :&:&E1-I:1* \ .B.V .T
	}


	.{====================
		instance methods
	======================.}

	.# fluid_logic constructor
	def fluid_logic::__init__ {
				x_dim::num				.# amount of columns in grid
				y_dim::num				.# amount of rows in grid
				solver_iterations::num	.# number of iterations to use when solving system of simultaneous equations
				self,
				
		x_dim self.:x_dim;
		y_dim self.:y_dim;
		solver_iterations self.:solver_iterations;
	}
	
	.# simulates the density change over a timestep and returns the new density matrix.rows
	def fluid_logic::simulate_density {densities::list velocity_x::list velocity_y::list diffusion_rate::num advection_rate::num self,
		.# TODO input density
		densities diffusion_rate {fluid_logic.boundary_duplicate} self.diffuse
		velocity_x velocity_y advection_rate {fluid_logic.boundary_duplicate} self.advect
	}
	
	.# simulates the velocity change over a timestep and returns the new {velocity_x velocity_y}
	def fluid_logic::simulate_velocity {velocity_x::list velocity_y::list advection_rate::num projection_rate::num viscosity::num self,
		.# TODO input velocity
		velocity_x viscosity {fluid_logic.boundary_mirror_x} self.diffuse .# keep vx on stack
		velocity_y viscosity {fluid_logic.boundary_mirror_y} self.diffuse .# keep vy on stack
		projection_rate self.project :velocity_y; :velocity_x;
		
		velocity_x velocity_x velocity_y advection_rate {fluid_logic.boundary_mirror_x} self.advect .# keep vx on stack
		velocity_y velocity_x velocity_y advection_rate {fluid_logic.boundary_mirror_y} self.advect .# keep vy on stack
		projection_rate self.project
	}

	.# given a grid of scalars, e.g. [[1 2 3][4 5 6][7 8 9]]
	.# compute a new grid of scalars that are diffused (each cell approaches the average of its neighbors)
	.# boundary_func must be a function mapping from the inner matrix to the full matrix, e.g. '{mat, mat 1\.pad}'
	def fluid_logic::diffuse {scalar_grid::list rate::num boundary_func::block self,
		scalar_grid :old_mat $ :new_mat;;
		
		self.solver_iterations .R :# {iteration,
			{new_mat.rotate_rows} :rr;
			{new_mat.rotate_cols} :rc;
			
			.# (sum(neighbors) * diff_rate + old_mat) / (1 + (4 * diff_rate))
			1 rr :1 rr 1 rc :1 rc
			+++ rate *
			old_mat +
			4 rate * 1 + /
			:1\.pad boundary_func :new_mat;
		};
		new_mat
	}
	
	.# given a grid of scalars, compute a new grid of scalars that are carried along by the given velocities
	.# boundary_func must be a function mapping from the inner matrix to the full matrix, e.g. '{mat, mat 1\.pad}'
	def fluid_logic::advect {scalar_grid::list velocity_x::list velocity_y::list advection_rate::num boundary_func::block self,
	
		self.x_dim 	:x_dim;
		self.y_dim 	:y_dim;
		
		[ .# for x,y gather scalars[ [x y] [x y+1] [x+1 y] [x+1 y+1] ]
			scalar_grid
			:& :1 \ .rotate_rows
			:& :1 \ .rotate_cols
			:& 1 \ .rotate_rows \
		] .T:#{.T} :scalars_xoyo_xoyi_xiyo_xiyi;
		
		[
			[x_dim 2-R {:&} y_dim 3- %] 		.# for every non-boundary grid cell, store x coordinate
			[y_dim 2-R {:&} x_dim 3- %].T 		.# non-boundary y coordinates
			:1 velocity_x .pad	.# non-boundary x velocities
			:1 velocity_y .pad	.# non-boundary y velocities
		].T:#{.T:#{~ :vy; :vx; :y; :x; .# for every non-boundary cell as [x y vx vy]
			x vx advection_rate * -   0.5.<   x_dim 1.5-.> :xs .\ :xo;
			y vy advection_rate * -   0.5.<   y_dim 1.5-.> :ys .\ :yo;
			
			xs xo - :dxi   1\- :dxo;
			ys yo - :dyi   1\- :dyo;
			
			scalars_xoyo_xoyi_xiyo_xiyi yo I xo I .# load scalars [x0y0 x0y1 x1y0 x1y1]
			~ dxi dyi * *
			\ dxi dyo * * +
			\ dxo dyi * * +
			\ dxo dyo * * +
		}}boundary_func
	}
	
	.# ensure that velocities are mass conserving by removing divergence
	.# returns new {velocity_x velocity_y}
	def fluid_logic::project {velocity_x::list velocity_y::list projection_rate::num self,
		velocity_x :velocity_x;
		velocity_y :velocity_y;
		
		:1 velocity_x.rotate_cols   1 velocity_x.rotate_cols  -
		:1 velocity_y.rotate_rows   1 velocity_y.rotate_rows  - +
		:0.5 projection_rate * *
		:1\.pad fluid_logic.boundary_duplicate :divergence;
		
		[self.y_dim self.x_dim] 0\L :poisson;
		
		self.solver_iterations .R :# {iteration,
			{poisson.rotate_rows} :rr;
			{poisson.rotate_cols} :rc;
			1 rr :1 rr 1 rc :1 rc
			+++ divergence+ 4/
			:1\.pad fluid_logic.boundary_duplicate :poisson;
		};
		
		velocity_x :1 poisson.rotate_cols 1 poisson.rotate_cols - 0.5 projection_rate / * -
		:1\.pad fluid_logic.boundary_mirror_x :velocity_x;
		
		velocity_y :1 poisson.rotate_rows 1 poisson.rotate_rows - 0.5 projection_rate / * -
		:1\.pad fluid_logic.boundary_mirror_y :velocity_y;
		
		velocity_x velocity_y
	}
