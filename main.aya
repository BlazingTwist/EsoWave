.{
	This main is a mess, I'm sorry.
.}

bp

import ::canvas
import ::matrix
import "utils.fluid_logic"
"utils.interactive_ui" importlib.import
"config" importlib.import config .# execute config to load it
"ui_setup" importlib.import ui_setup

grid_size_x 2+ grid_size_y 2+ solver_iterations fluid_logic! :fluid;

grid_size_y 2+ 2/ :center;
[grid_size_y 2+,][grid_size_x 2+,]{y x, 10 x5-$* y center -$*0.4* + - 0.< 20 *}:* matrix! :velocity_gain_x;
[grid_size_y 2+,][grid_size_x 2+,]{y x, 0}:* matrix! :velocity_gain_y;

20: cur_vx_max;
20: cur_vy_max;
255: cur_d_max;

{cur target,
	target cur - 0.1* cur+
}:move_towards;

{densities velocity_x velocity_y,
	densities    E :size_y;
	densities.[0]E :size_x;
	densities :#{{.|\.|.<}%}{.<}% :d_max;
	
	cur_d_max d_max move_towards 0.5.< :cur_d_max;
	
	[ [size_x.R {:&} size_y 1-%]   [size_y.R {:&} size_x 1-%].T   densities ]
	.T:#{.T:#{~ :d; :y; :x;
		d.| cur_d_max/ 255* 255.> :& :& _canvas.id:{graphics.set_color}
		x pixel_size* y pixel_size* pixel_size pixel_size _canvas.fillrect
	}};
}:draw_density_gray;

{densities velocity_x velocity_y,
	densities    E :size_y;
	densities.[0]E :size_x;
	velocity_x :#{{.|\.|.<}%}{.<}% :vx_max;
	velocity_y :#{{.|\.|.<}%}{.<}% :vy_max;
	densities :#{{.|\.|.<}%}{.<}% :d_max;
	
	cur_vx_max vx_max move_towards 0.5.< :cur_vx_max;
	cur_vy_max vy_max move_towards 0.5.< :cur_vy_max;
	cur_d_max  d_max  move_towards 0.5.< :cur_d_max;

	[ [size_x.R {:&} size_y 1-%]   [size_y.R {:&} size_x 1-%].T   densities velocity_x velocity_y ]
	.T:#{.T:#{~ :vy; :vx; :d; :y; :x;
		vx.| cur_vx_max/ 255* 255.> vy.| cur_vy_max/ 255* 255.> d.| cur_d_max/ 255* 255.> _canvas.id:{graphics.set_color}
		x pixel_size * y pixel_size * pixel_size pixel_size _canvas.fillrect
	}};
}:draw_all;

{densities velocity_x velocity_y,
	densities    E :size_y;
	densities.[0]E :size_x;
	velocity_x :#{{.|\.|.<}%}{.<}% :vx_max;
	velocity_y :#{{.|\.|.<}%}{.<}% :vy_max;
	
	cur_vx_max vx_max move_towards 0.5.< :cur_vx_max;
	cur_vy_max vy_max move_towards 0.5.< :cur_vy_max;
	
	[ [size_x.R {:&} size_y 1-%]   [size_y.R {:&} size_x 1-%].T   velocity_x velocity_y ]
	.T:#{.T:#{~ :vy; :vx; :y; :x;
		vx.| cur_vx_max/ 255* 255.> vy.| cur_vy_max/ 255* 255.> 0 _canvas.id:{graphics.set_color}
		x pixel_size * y pixel_size * pixel_size pixel_size _canvas.fillrect
	}};
}:draw_velocity_abs;

[
	{draw_all}
	{draw_density_gray}
	{draw_velocity_abs}
]:render_functions;

M$ :prev_time;
[0 0] :prev_cursor_position;
{
	M$ :cur_time;
	cur_time prev_time - :delta_ms;

	_canvas.id :{graphics.click_events} :events;
	events ui.check_buttons
	
	_canvas.id :{graphics.move_events} :move_events;
	
	.# if left-click is down, handle move events as dragging
	_canvas.id :{graphics.pressed_buttons} 1 N 0<! :left_click_held; ;
	move_events E 0> {
		left_click_held {
			delta_ms move_events E / :move_dt;
			prev_cursor_position~ :prev_y; :prev_x;
			move_events :# {move_event,
				prev_x pixel_size .% 1.< grid_size_x.> :xo;
				prev_y pixel_size .% 1.< grid_size_y.> :yo;
				move_event.x prev_x - :dx;
				move_event.y prev_y - :dy;
				
				dx 0 = ! { dx move_dt * drag_intensity * velocity_gain_x.rows yo I :& xo I @ + \ xo D; } ?
				dy 0 = ! { dy move_dt * drag_intensity * velocity_gain_y.rows yo I :& xo I @ + \ xo D; } ?
				drag_density_gain move_dt * densities yo I :& xo I @ + \ xo D;
				
				move_event.x :prev_x;
				move_event.y :prev_y;
			}
			[prev_x prev_y] :prev_cursor_position;
		} {
			move_events B :final_move_event; ;
			[final_move_event.x final_move_event.y] :prev_cursor_position;
		} .?
	} ?

	print_frame_delta {M$ :start;}?
	
	.# apply velocity gain
	velocity_x matrix._new velocity_gain_x + .rows :velocity_x;
	velocity_y matrix._new velocity_gain_y + .rows :velocity_y;
	
	.# damp gains
	velocity_gain_x 0.8 * :velocity_gain_x;
	velocity_gain_y 0.8 * :velocity_gain_y;
	
	.# disperse density
	densities matrix._new 0.99 * .rows :densities;
	
	.# handle velocity update
	velocity_x velocity_y advection_rate projection_rate viscosity fluid.simulate_velocity :velocity_y; :velocity_x;
	
	.# handle density update
	densities velocity_x velocity_y diffusion_rate advection_rate fluid.simulate_density :densities;
	
	.# draw canvas
	densities matrix._new:1\.pad.rows
	velocity_x matrix._new:1\.pad.rows
	velocity_y matrix._new:1\.pad.rows
	render_functions render_mode I ~
	
	print_frame_delta {
		M$ :end;
		"frame delta: "end start - + " ms"+ :P
	}?
	
	_canvas.show

	cur_time :prev_time;
	17 :Z	
	_canvas.isopen
}W
